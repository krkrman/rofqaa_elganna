def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.rofqaa_elganna"
        minSdkVersion 26
        multiDexEnabled = true
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            getByName("release") {
                multiDexKeepProguard = file('multidex-config.pro')
                // Enables code shrinking, obfuscation, and optimization for only
                // your project's release build type.
                minifyEnabled = true

                // Enables resource shrinking, which is performed by the
                // Android Gradle plugin.
                shrinkResources = true

                // Includes the default ProGuard rules files that are packaged with
                // the Android Gradle plugin. To learn more, go to the section about
                // R8 configuration files.
                proguardFiles(
                        getDefaultProguardFile("proguard-android-optimize.txt"),
                        // List additional ProGuard rules for the given build type here. By default,
                        // Android Studio creates and includes an empty rules file for you (located
                        // at the root directory of each module).
                        "proguard-rules.pro"
                )

            }
        }
    }
}

flutter {
    source '../..'
}
dependencies {
    def multidex_version = "2.0.1"
    implementation("androidx.multidex:multidex:$multidex_version")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform('com.google.firebase:firebase-bom:28.2.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation "com.android.support:support-annotations:27.1.0"
    implementation "com.android.support:support-v4:27.1.0"
}

